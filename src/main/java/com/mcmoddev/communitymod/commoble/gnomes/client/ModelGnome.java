// Date: 4/7/2014 10:03:01 PM
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX






package com.mcmoddev.communitymod.commoble.gnomes.client;

import net.minecraft.client.model.ModelBiped;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;
import net.minecraft.util.math.MathHelper;

public class ModelGnome extends ModelBiped
{
	//fields
	public boolean isCarrying;
		
	ModelRenderer beard1;
	ModelRenderer nose;
	float head_pivot_y = 16F;
	float body_pivot_y = 16F;
	float beard_rotate_x_offset = -0.4363323F;
	float left_arm_pivot_x = 4F;
	float right_arm_pivot_x = -4F;
	float arm_pivot_y = 18F;
	float arm_pivot_z = 0F;
	float left_leg_pivot_x = 2F;
	float right_leg_pivot_x = -2F;
	float leg_pivot_y = 21F;
	float leg_pivot_z = 0F;
	
	float right_arm_x_pivot_offset = right_arm_pivot_x - (-5.0F);
	float left_arm_x_pivot_offset = left_arm_pivot_x - (5.0F);
	float arm_y_pivot_offset = arm_pivot_y - 2.0F;

	float right_leg_x_pivot_offset = right_leg_pivot_x - (-1.9F);
	float left_leg_x_pivot_offset = left_leg_pivot_x - 1.9F;
	float leg_y_pivot_offset = arm_pivot_y - 12.0F;
	
	public ModelGnome()
	{
		textureWidth = 64;
		textureHeight = 32;
        this.leftArmPose = ModelBiped.ArmPose.EMPTY;
        this.rightArmPose = ModelBiped.ArmPose.EMPTY;
		
		bipedHead = new ModelRenderer(this, 0, 0);
		bipedHead.addBox(-4F, -7F, -4F, 8, 7, 8);
		bipedHead.setRotationPoint(0F, 16F, 0F);
		bipedHead.setTextureSize(64, 32);
		bipedHead.mirror = true;
		setRotation(bipedHead, 0F, 0F, 0F);
		bipedBody = new ModelRenderer(this, 16, 16);
		bipedBody.addBox(-3F, 0F, -3F, 6, 5, 6);
		bipedBody.setRotationPoint(0F, 16F, 0F);
		bipedBody.setTextureSize(64, 32);
		bipedBody.mirror = true;
		setRotation(bipedBody, 0F, 0F, 0F);
		bipedRightArm = new ModelRenderer(this, 40, 13);
		bipedRightArm.addBox(-3F, -2F, -2F, 4, 5, 4);
		bipedRightArm.setRotationPoint(-4F, 18F, 0F);
		bipedRightArm.setTextureSize(64, 32);
		bipedRightArm.mirror = true;
		setRotation(bipedRightArm, 0F, 0F, 0F);
		bipedLeftArm = new ModelRenderer(this, 40, 22);
		bipedLeftArm.addBox(-1F, -2F, -2F, 4, 5, 4);
		bipedLeftArm.setRotationPoint(4F, 18F, 0F);
		bipedLeftArm.setTextureSize(64, 32);
		bipedLeftArm.mirror = true;
		setRotation(bipedLeftArm, 0F, 0F, 0F);
		bipedRightLeg = new ModelRenderer(this, 0, 16);
		bipedRightLeg.addBox(-2F, 0F, -2F, 4, 3, 4);
		bipedRightLeg.setRotationPoint(-2F, 21F, 0F);
		bipedRightLeg.setTextureSize(64, 32);
		bipedRightLeg.mirror = true;
		setRotation(bipedRightLeg, 0F, 0F, 0F);
		bipedLeftLeg = new ModelRenderer(this, 36, 6);
		bipedLeftLeg.addBox(-2F, 0F, -2F, 4, 3, 4);
		bipedLeftLeg.setRotationPoint(2F, 21F, 0F);
		bipedLeftLeg.setTextureSize(64, 32);
		bipedLeftLeg.mirror = true;
		setRotation(bipedLeftLeg, 0F, 0F, 0F);
		beard1 = new ModelRenderer(this, 45, 0);
		beard1.addBox(-2.5F, 0F, -4F, 5, 3, 1);
		beard1.setRotationPoint(0F, 16F, 0F);
		beard1.setTextureSize(64, 32);
		beard1.mirror = true;
		setRotation(beard1, -0.4363323F, 0F, 0F);
		nose = new ModelRenderer(this, 34, 0);
		nose.addBox(-1.5F, -4.5F, -6F, 3, 2, 2);
		nose.setRotationPoint(0F, 16F, 0F);
		nose.setTextureSize(64, 32);
		nose.mirror = true;
		setRotation(nose, 0F, 0F, 0F);
	}
	

	
	private void setRotation(ModelRenderer model, float x, float y, float z)
	{
		model.rotateAngleX = x;
		model.rotateAngleY = y;
		model.rotateAngleZ = z;
	}
	
	public void render(Entity entity, float f, float f1, float f2, float f3, float f4, float f5)
	{
		//super.render(entity, f, f1, f2, f3, f4, f5);
		setRotationAngles(f, f1, f2, f3, f4, f5, entity);
		bipedHead.render(f5);
		bipedBody.render(f5);
		bipedRightArm.render(f5);
		bipedLeftArm.render(f5);
		bipedRightLeg.render(f5);
		bipedLeftLeg.render(f5);
		beard1.render(f5);
		nose.render(f5);
	}
	
	/**
	 * Sets the model's various rotation angles. For bipeds, par1 and par2 are used for animating the movement of arms
	 * and legs, where par1 represents the time(so that arms and legs swing back and forth) and par2 represents how
	 * "far" arms and legs can swing at most.
	 */
	public void setRotationAngles(float limbSwing, float limgSwingAmount, float ageInTicks, float netHeadYaw,
			float headPitch, float scaleFactor, Entity ent)
	{
		this.bipedHead.rotateAngleY = netHeadYaw / (180F / (float)Math.PI);
		this.bipedHead.rotateAngleX = headPitch / (180F / (float)Math.PI);
		//this.bipedHeadwear.rotateAngleY = this.bipedHead.rotateAngleY;
		//this.bipedHeadwear.rotateAngleX = this.bipedHead.rotateAngleX;
		this.bipedRightArm.rotateAngleX = MathHelper.cos(limbSwing * 0.6662F + (float)Math.PI) * 2.0F * limgSwingAmount * 0.5F;
		this.bipedLeftArm.rotateAngleX = MathHelper.cos(limbSwing * 0.6662F) * 2.0F * limgSwingAmount * 0.5F;
		this.bipedRightArm.rotateAngleZ = 0.0F;
		this.bipedLeftArm.rotateAngleZ = 0.0F;
		this.bipedRightLeg.rotateAngleX = MathHelper.cos(limbSwing * 0.6662F) * 1.4F * limgSwingAmount;
		this.bipedLeftLeg.rotateAngleX = MathHelper.cos(limbSwing * 0.6662F + (float)Math.PI) * 1.4F * limgSwingAmount;
		this.bipedRightLeg.rotateAngleY = 0.0F;
		this.bipedLeftLeg.rotateAngleY = 0.0F;

		if (this.isRiding)
		{
				this.bipedRightArm.rotateAngleX += -((float)Math.PI / 5F);
				this.bipedLeftArm.rotateAngleX += -((float)Math.PI / 5F);
				this.bipedRightLeg.rotateAngleX = -((float)Math.PI * 2F / 5F);
				this.bipedLeftLeg.rotateAngleX = -((float)Math.PI * 2F / 5F);
				this.bipedRightLeg.rotateAngleY = ((float)Math.PI / 10F);
				this.bipedLeftLeg.rotateAngleY = -((float)Math.PI / 10F);
		}

		/*if (this.heldItemLeft != 0)
		{
				this.bipedLeftArm.rotateAngleX = this.bipedLeftArm.rotateAngleX * 0.5F - ((float)Math.PI / 10F) * (float)this.heldItemLeft;
		}

		if (this.heldItemRight != 0)
		{
				this.bipedRightArm.rotateAngleX = this.bipedRightArm.rotateAngleX * 0.5F - ((float)Math.PI / 10F) * (float)this.heldItemRight;
		}*/
		if (this.isCarrying)
        {
            this.bipedLeftArm.rotateAngleX = this.bipedLeftArm.rotateAngleX * 0.5F - 0.9424779F;
            this.bipedLeftArm.rotateAngleY = 0.5235988F;
            this.bipedRightArm.rotateAngleX = this.bipedRightArm.rotateAngleX * 0.5F - 0.9424779F;
            this.bipedRightArm.rotateAngleY = -0.5235988F;
			
            //this.bipedRightArm.rotateAngleX = -1.5F;
            //this.bipedLeftArm.rotateAngleX = -1.5F;
            this.bipedRightArm.rotateAngleZ = 0.05F;
            this.bipedLeftArm.rotateAngleZ = -0.05F;
        }
		else
		{
            this.bipedLeftArm.rotateAngleY = 0F;
            this.bipedRightArm.rotateAngleY = 0F;
		}

		//this.bipedRightArm.rotateAngleY = 0.0F;
		//this.bipedLeftArm.rotateAngleY = 0.0F;
		float f6;
		float f7;

		if (this.swingProgress > -9990.0F)
		{
				f6 = this.swingProgress;
				this.bipedBody.rotateAngleY = MathHelper.sin(MathHelper.sqrt(f6) * (float)Math.PI * 2.0F) * 0.2F;
				this.bipedRightArm.rotationPointZ = MathHelper.sin(this.bipedBody.rotateAngleY) * 5.0F;
				this.bipedRightArm.rotationPointX = -MathHelper.cos(this.bipedBody.rotateAngleY) * 5.0F + right_arm_x_pivot_offset;
				this.bipedLeftArm.rotationPointZ = -MathHelper.sin(this.bipedBody.rotateAngleY) * 5.0F;
				this.bipedLeftArm.rotationPointX = MathHelper.cos(this.bipedBody.rotateAngleY) * 5.0F + left_arm_x_pivot_offset;
				this.bipedRightArm.rotateAngleY += this.bipedBody.rotateAngleY;
				this.bipedLeftArm.rotateAngleY += this.bipedBody.rotateAngleY;
				this.bipedLeftArm.rotateAngleX += this.bipedBody.rotateAngleY;
				f6 = 1.0F - this.swingProgress;
				f6 *= f6;
				f6 *= f6;
				f6 = 1.0F - f6;
				f7 = MathHelper.sin(f6 * (float)Math.PI);
				float f8 = MathHelper.sin(this.swingProgress * (float)Math.PI) * -(this.bipedHead.rotateAngleX - 0.7F) * 0.75F;
				this.bipedRightArm.rotateAngleX = (float)((double)this.bipedRightArm.rotateAngleX - ((double)f7 * 1.2D + (double)f8));
				this.bipedRightArm.rotateAngleY += this.bipedBody.rotateAngleY * 2.0F;
				this.bipedRightArm.rotateAngleZ = MathHelper.sin(this.swingProgress * (float)Math.PI) * -0.4F;
		}

		this.bipedBody.rotateAngleX = 0.0F;
		this.bipedRightLeg.rotationPointZ = 0.1F;
		this.bipedLeftLeg.rotationPointZ = 0.1F;
		this.bipedRightLeg.rotationPointY = 21.0F; //12.0F + leg_y_pivot_offset;
		this.bipedLeftLeg.rotationPointY = 21.0F; //12.0F + leg_y_pivot_offset;
		this.bipedHead.rotationPointY = 16F;
		//this.bipedHeadwear.rotationPointY = 0.0F;

		this.bipedRightArm.rotateAngleZ += MathHelper.cos(ageInTicks * 0.09F) * 0.05F + 0.05F;
		this.bipedLeftArm.rotateAngleZ -= MathHelper.cos(ageInTicks * 0.09F) * 0.05F + 0.05F;
		this.bipedRightArm.rotateAngleX += MathHelper.sin(ageInTicks * 0.067F) * 0.05F;
		this.bipedLeftArm.rotateAngleX -= MathHelper.sin(ageInTicks * 0.067F) * 0.05F;

        if (this.rightArmPose == ModelBiped.ArmPose.BOW_AND_ARROW)
        {
            this.bipedRightArm.rotateAngleY = -0.1F + this.bipedHead.rotateAngleY;
            this.bipedLeftArm.rotateAngleY = 0.1F + this.bipedHead.rotateAngleY + 0.4F;
            this.bipedRightArm.rotateAngleX = -((float)Math.PI / 2F) + this.bipedHead.rotateAngleX;
            this.bipedLeftArm.rotateAngleX = -((float)Math.PI / 2F) + this.bipedHead.rotateAngleX;
        }
        else if (this.leftArmPose == ModelBiped.ArmPose.BOW_AND_ARROW)
        {
            this.bipedRightArm.rotateAngleY = -0.1F + this.bipedHead.rotateAngleY - 0.4F;
            this.bipedLeftArm.rotateAngleY = 0.1F + this.bipedHead.rotateAngleY;
            this.bipedRightArm.rotateAngleX = -((float)Math.PI / 2F) + this.bipedHead.rotateAngleX;
            this.bipedLeftArm.rotateAngleX = -((float)Math.PI / 2F) + this.bipedHead.rotateAngleX;
        }
		
		setRotation(nose, this.bipedHead.rotateAngleX, this.bipedHead.rotateAngleY, this.bipedHead.rotateAngleZ);
		setRotation(beard1, this.bipedHead.rotateAngleX + beard_rotate_x_offset, this.bipedHead.rotateAngleY, this.bipedHead.rotateAngleZ);
	}

}
